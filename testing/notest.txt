WHY TEST?
Manual Testing
Software testing is the process of assessing the completeness and quality of computer software. Usually this is done by running a part of a system (like a web application) and comparing the actual behavior to the expected behavior.

One way to perform software testing is manual testing. Manual testing is a form of testing done by a human interacting with a system. With web apps, this might be clicking, dragging, and typing through a webpage. A list of actions and expected behaviors would be given. If the observed behavior doesn’t match the expected behavior, the application has an error.

Errors, like the ones you may have found in the provided web app, are also called bugs. A bug is an error, fault, or flaw in software that makes a system behave in unexpected ways. As you read in the last exercise, these unexpected behaviors can cause harm to users. Ideally testing catches bugs before they are sent to users.

Instructions
The same application is provided. As a manual test engineer for this app, you have been provided some features to test. Manually test the web app by following the list provided:

Behavior 1: Run npm start in the terminal and reload the page. Scroll down and expect the webpage to start with a blank order.
Behavior 2: Type a name and click “Place Order”. Scroll down and expect “Deliver to:” to display the submitted name.
Behavior 3: A blank name will not overwrite the existing name.
Behavior 4: Select a cake type and place the order. Expect “Cake” to display the selected cake type.
Behavior 5: Check some fillings. Expect “Fillings” to display your selected fillings.
Behavior 6: Choose a stack size. Expect “Pancake Count:” to display the number equivalent to the stack size, e.g. “Double” is “2”.


Tests As Documentation
Imagine explaining this Cake Bar app to someone else. How does it behave? Does it rely on other software? How do you run it on a computer? You could read every line in every file to figure that out. Or you could read the documentation.

Documentation is any content separate from implementation code that explains how it works or how to use it. It may provide more concise summaries and explanation than the implementation code can.

Documentation can come in many forms, including plain text, diagrams…and tests! Tests as documentation provide what many other forms cannot: both human-readable text to describe the application and machine-executable code to confirm the app works as described.

This code block from the Cake Bar app describes and tests the “name” functionality.

it('accepts the customer name', () => {
  const name = 'Hungry Person';

  browser.url('/');
  browser.setValue('#name', name);
  browser.click('#submit-order');
  browser.url('/');

  assert.include(browser.getText('#deliver-to'), name);
});
You can read the description in plain English terms: it accepts the customer name. You can run the test to confirm the functionality works as described.

Instructions
1.
Copy and paste the below code into the test/features/user-visits-index-test.js file. This part of the test explains the functionality in easy-to-read text. When you’re done, click Run.

Paste this test structure at the bottom of the file, near line 91.

describe('to clear an order', () => {
  it('deletes the selected options', () => {

  });
});
2.
Copy and paste the body of the test within that block (underneath the line containing it). This part of the test will confirm that the clear order button deletes the selected options. When you’re done, click Run.

      const name = 'Indecisive Person';
      const time = '10:00';

      browser.url('/');
      browser.setValue('#name', name);
      browser.selectByVisibleText('#select-pickUp', time)
      browser.click('#submit-order');
      browser.click('#clear-order');
      browser.url('/');

      assert.equal(browser.getText('#deliver-to'), '');
      assert.equal(browser.getText('#cake-type'), '');
      assert.equal(browser.getText('#fillings'), '');
      assert.equal(browser.getText('#size'), '');
      assert.equal(browser.getText('#pickUp'), '');
3.
Run the test suite. You should see the new test fail. By running the suite you’ve confirmed that the application does not behave as expected!

￼
Stuck? Get a hint
4.
Test this manually. Run npm start in the terminal, reload the page, and see that the clear order button doesn’t exist yet!


WHY TEST?
Regression
The new “clear order” button feature has been implemented to satisfy the new test.

When adding a new feature to your product, it’s possible that something will break. If that break occurs within a feature developed earlier, it is called regression. When functionality previously developed and tested stops working, you may say the functionality regressed.

Running an automated test suite is fast and repeatable, which means you can run tests after every change to confirm that old features still work. If they have regressed, the test output should notify you.

Instructions
1.
Code to implement the new “clear order” feature has been added. Start the app and manually test the new and old button features:

Click “Clear”. Expect the order to be empty.
Enter an order and click “Place Order”. Expect the order to be populated with your selections. Do both buttons behave as expected?
When you’re done, check work.

￼
Stuck? Get a hint
2.
Stop the app by pressing CTRL + C (the control button and C key at the same time), then run the test suite.

You can scroll up to see that the new feature test (“to clear an order”) is passing and the old tests are failing. You found a regression!

When you’re done, check work.

￼
Stuck? Get a hint
3.
Here’s the bug: The “clear” button is using /place-order instead of /clear-order, making both buttons clear the order!

Fix the regression, step 1: In views/index.handlebars around line 117, find the form

<form action="/place-order" method="post">
and replace it with

<form action="/clear-order" method="post">
Click Check Work when you’ve replaced the code.

4.
Fix the regression, step 2: In routes/index.js around line 13, replace the first instance of

router.post('/place-order', async (req, res) => {
with

router.post('/clear-order', async (req, res) => {
Click Check Work when you’ve replaced the code.

5.
Run the test suite again to confirm the fix works as expected.

If you don’t see 7 passing tests, double check that clear order is on the right line in each file!

When you’re done, check work.


Why Test?
Connected to Codecademy
￼
￼
￼
Narrative
Learn
WHY TEST?
Regression
The new “clear order” button feature has been implemented to satisfy the new test.

When adding a new feature to your product, it’s possible that something will break. If that break occurs within a feature developed earlier, it is called regression. When functionality previously developed and tested stops working, you may say the functionality regressed.

Running an automated test suite is fast and repeatable, which means you can run tests after every change to confirm that old features still work. If they have regressed, the test output should notify you.

Instructions
1.
Code to implement the new “clear order” feature has been added. Start the app and manually test the new and old button features:

Click “Clear”. Expect the order to be empty.
Enter an order and click “Place Order”. Expect the order to be populated with your selections. Do both buttons behave as expected?
When you’re done, check work.

Checkpoint 2 Passed
￼
Stuck? Get a hint
2.
Stop the app by pressing CTRL + C (the control button and C key at the same time), then run the test suite.

You can scroll up to see that the new feature test (“to clear an order”) is passing and the old tests are failing. You found a regression!

When you’re done, check work.

Checkpoint 3 Passed
￼
Stuck? Get a hint
3.
Here’s the bug: The “clear” button is using /place-order instead of /clear-order, making both buttons clear the order!

Fix the regression, step 1: In views/index.handlebars around line 117, find the form

<form action="/place-order" method="post">
and replace it with

<form action="/clear-order" method="post">
Click Check Work when you’ve replaced the code.

Checkpoint 4 Passed
4.
Fix the regression, step 2: In routes/index.js around line 13, replace the first instance of

router.post('/place-order', async (req, res) => {
with

router.post('/clear-order', async (req, res) => {
Click Check Work when you’ve replaced the code.

Checkpoint 5 Passed
5.
Run the test suite again to confirm the fix works as expected.

If you don’t see 7 passing tests, double check that clear order is on the right line in each file!

When you’re done, check work.

Checkpoint 6 Passed
￼
Hint
Run npm test in the terminal, review the output, then check your work.

￼
Narrative
Learn
WHY TEST?
Review
Writing automated tests takes time, but the cost is outweighed by the benefits. Automated testing

Increases confidence that your product works as expected (compared to manual testing)
Improves upon documentation
Reduces the likelihood of regression
You also learned

Where and why test code is stored alongside implementation code
Terms to help communicate the benefit of testing: manual testing, automated testing, test suite, bug, documentation, and regression
Instructions
1.
Run the test suite to confirm the app is working as expected.

￼
Stuck? Get a hint
2.
Start the app, reload the page, and enjoy a bug-free Cake Bar.
